{"version":3,"file":"kalidokit-_jXEaiY1.js","sources":["../../node_modules/kalidokit/dist/utils/helpers.js","../../node_modules/kalidokit/dist/constants.js","../../node_modules/kalidokit/dist/utils/vector.js","../../node_modules/kalidokit/dist/FaceSolver/calcHead.js","../../node_modules/kalidokit/dist/FaceSolver/calcEyes.js","../../node_modules/kalidokit/dist/FaceSolver/calcMouth.js","../../node_modules/kalidokit/dist/FaceSolver/index.js"],"sourcesContent":["/**\n * Returns a clamped value between min and max values\n * @param {Number} val : transformed value\n * @param {Number} min : minimum value\n * @param {Number} max : maximum value\n */\nexport const clamp = (val, min, max) => {\n    return Math.max(Math.min(val, max), min);\n};\n/**\n * Returns a remapped value between 0 and 1 using min and max values\n * @param {Number} value : transformed value\n * @param {Number} min : minimum value\n * @param {Number} max : maximum value\n */\nexport const remap = (val, min, max) => {\n    //returns min to max -> 0 to 1\n    return (clamp(val, min, max) - min) / (max - min);\n};\n/** A set of default pose values in radians to serve as \"rest\" values */\nexport const RestingDefault = {\n    Face: {\n        eye: {\n            l: 1,\n            r: 1,\n        },\n        mouth: {\n            x: 0,\n            y: 0,\n            shape: {\n                A: 0,\n                E: 0,\n                I: 0,\n                O: 0,\n                U: 0,\n            },\n        },\n        head: {\n            x: 0,\n            y: 0,\n            z: 0,\n            width: 0.3,\n            height: 0.6,\n            position: {\n                x: 0.5,\n                y: 0.5,\n                z: 0,\n            },\n        },\n        brow: 0,\n        pupil: {\n            x: 0,\n            y: 0,\n        },\n    },\n    Pose: {\n        RightUpperArm: {\n            x: 0,\n            y: 0,\n            z: -1.25,\n        },\n        LeftUpperArm: {\n            x: 0,\n            y: 0,\n            z: 1.25,\n        },\n        RightLowerArm: {\n            x: 0,\n            y: 0,\n            z: 0,\n        },\n        LeftLowerArm: {\n            x: 0,\n            y: 0,\n            z: 0,\n        },\n        LeftUpperLeg: {\n            x: 0,\n            y: 0,\n            z: 0,\n        },\n        RightUpperLeg: {\n            x: 0,\n            y: 0,\n            z: 0,\n        },\n        RightLowerLeg: {\n            x: 0,\n            y: 0,\n            z: 0,\n        },\n        LeftLowerLeg: {\n            x: 0,\n            y: 0,\n            z: 0,\n        },\n        LeftHand: {\n            x: 0,\n            y: 0,\n            z: 0,\n        },\n        RightHand: {\n            x: 0,\n            y: 0,\n            z: 0,\n        },\n        Spine: {\n            x: 0,\n            y: 0,\n            z: 0,\n        },\n        Hips: {\n            position: {\n                x: 0,\n                y: 0,\n                z: 0,\n            },\n            rotation: {\n                x: 0,\n                y: 0,\n                z: 0,\n            },\n        },\n    },\n    RightHand: {\n        RightWrist: {\n            x: -0.13,\n            y: -0.07,\n            z: -1.04,\n        },\n        RightRingProximal: {\n            x: 0,\n            y: 0,\n            z: -0.13,\n        },\n        RightRingIntermediate: {\n            x: 0,\n            y: 0,\n            z: -0.4,\n        },\n        RightRingDistal: {\n            x: 0,\n            y: 0,\n            z: -0.04,\n        },\n        RightIndexProximal: {\n            x: 0,\n            y: 0,\n            z: -0.24,\n        },\n        RightIndexIntermediate: {\n            x: 0,\n            y: 0,\n            z: -0.25,\n        },\n        RightIndexDistal: {\n            x: 0,\n            y: 0,\n            z: -0.06,\n        },\n        RightMiddleProximal: {\n            x: 0,\n            y: 0,\n            z: -0.09,\n        },\n        RightMiddleIntermediate: {\n            x: 0,\n            y: 0,\n            z: -0.44,\n        },\n        RightMiddleDistal: {\n            x: 0,\n            y: 0,\n            z: -0.06,\n        },\n        RightThumbProximal: {\n            x: -0.23,\n            y: -0.33,\n            z: -0.12,\n        },\n        RightThumbIntermediate: {\n            x: -0.2,\n            y: -0.199,\n            z: -0.0139,\n        },\n        RightThumbDistal: {\n            x: -0.2,\n            y: 0.002,\n            z: 0.15,\n        },\n        RightLittleProximal: {\n            x: 0,\n            y: 0,\n            z: -0.09,\n        },\n        RightLittleIntermediate: {\n            x: 0,\n            y: 0,\n            z: -0.225,\n        },\n        RightLittleDistal: {\n            x: 0,\n            y: 0,\n            z: -0.1,\n        },\n    },\n    LeftHand: {\n        LeftWrist: {\n            x: -0.13,\n            y: -0.07,\n            z: -1.04,\n        },\n        LeftRingProximal: {\n            x: 0,\n            y: 0,\n            z: 0.13,\n        },\n        LeftRingIntermediate: {\n            x: 0,\n            y: 0,\n            z: 0.4,\n        },\n        LeftRingDistal: {\n            x: 0,\n            y: 0,\n            z: 0.049,\n        },\n        LeftIndexProximal: {\n            x: 0,\n            y: 0,\n            z: 0.24,\n        },\n        LeftIndexIntermediate: {\n            x: 0,\n            y: 0,\n            z: 0.25,\n        },\n        LeftIndexDistal: {\n            x: 0,\n            y: 0,\n            z: 0.06,\n        },\n        LeftMiddleProximal: {\n            x: 0,\n            y: 0,\n            z: 0.09,\n        },\n        LeftMiddleIntermediate: {\n            x: 0,\n            y: 0,\n            z: 0.44,\n        },\n        LeftMiddleDistal: {\n            x: 0,\n            y: 0,\n            z: 0.066,\n        },\n        LeftThumbProximal: {\n            x: -0.23,\n            y: 0.33,\n            z: 0.12,\n        },\n        LeftThumbIntermediate: {\n            x: -0.2,\n            y: 0.25,\n            z: 0.05,\n        },\n        LeftThumbDistal: {\n            x: -0.2,\n            y: 0.17,\n            z: -0.06,\n        },\n        LeftLittleProximal: {\n            x: 0,\n            y: 0,\n            z: 0.17,\n        },\n        LeftLittleIntermediate: {\n            x: 0,\n            y: 0,\n            z: 0.4,\n        },\n        LeftLittleDistal: {\n            x: 0,\n            y: 0,\n            z: 0.1,\n        },\n    },\n};\n","export const RIGHT = \"Right\";\nexport const LEFT = \"Left\";\nexport const PI = Math.PI;\nexport const TWO_PI = Math.PI * 2;\n","import { PI, TWO_PI } from \"./../constants\";\n/** Vector Math class. */\nexport default class Vector {\n    constructor(a, b, c) {\n        var _a, _b, _c, _d, _e, _f;\n        if (Array.isArray(a)) {\n            this.x = (_a = a[0]) !== null && _a !== void 0 ? _a : 0;\n            this.y = (_b = a[1]) !== null && _b !== void 0 ? _b : 0;\n            this.z = (_c = a[2]) !== null && _c !== void 0 ? _c : 0;\n            return;\n        }\n        if (!!a && typeof a === \"object\") {\n            this.x = (_d = a.x) !== null && _d !== void 0 ? _d : 0;\n            this.y = (_e = a.y) !== null && _e !== void 0 ? _e : 0;\n            this.z = (_f = a.z) !== null && _f !== void 0 ? _f : 0;\n            return;\n        }\n        this.x = a !== null && a !== void 0 ? a : 0;\n        this.y = b !== null && b !== void 0 ? b : 0;\n        this.z = c !== null && c !== void 0 ? c : 0;\n    }\n    // Methods //\n    /**\n     * Returns the negative of this vector.\n     */\n    negative() {\n        return new Vector(-this.x, -this.y, -this.z);\n    }\n    /**\n     * Add a vector or number to this vector.\n     * @param {Vector | number} a: Vector or number to add\n     * @returns {Vector} New vector\n     */\n    add(v) {\n        if (v instanceof Vector)\n            return new Vector(this.x + v.x, this.y + v.y, this.z + v.z);\n        else\n            return new Vector(this.x + v, this.y + v, this.z + v);\n    }\n    /**\n     * Substracts a vector or number from this vector.\n     * @param {Vector | number} a: Vector or number to subtract\n     * @returns {Vector} New vector\n     */\n    subtract(v) {\n        if (v instanceof Vector)\n            return new Vector(this.x - v.x, this.y - v.y, this.z - v.z);\n        else\n            return new Vector(this.x - v, this.y - v, this.z - v);\n    }\n    /**\n     * Multiplies a vector or a number to a vector.\n     * @param {Vector | number} a: Vector or number to multiply\n     * @param {Vector} b: Vector to multiply\n     */\n    multiply(v) {\n        if (v instanceof Vector)\n            return new Vector(this.x * v.x, this.y * v.y, this.z * v.z);\n        else\n            return new Vector(this.x * v, this.y * v, this.z * v);\n    }\n    /**\n     * Divide this vector by a vector or a number.\n     * @param {Vector | number} a: Vector or number to divide\n     * @returns {Vector} New vector\n     */\n    divide(v) {\n        if (v instanceof Vector)\n            return new Vector(this.x / v.x, this.y / v.y, this.z / v.z);\n        else\n            return new Vector(this.x / v, this.y / v, this.z / v);\n    }\n    /**\n     * Check if the given vector is equal to this vector.\n     * @param {Vector} v: Vector to compare\n     * @returns {boolean} True if equal\n     */\n    equals(v) {\n        return this.x == v.x && this.y == v.y && this.z == v.z;\n    }\n    /**\n     * Returns the dot product of this vector and another vector.\n     * @param {Vector} v: Vector to dot\n     * @returns {number} Dot product\n     */\n    dot(v) {\n        return this.x * v.x + this.y * v.y + this.z * v.z;\n    }\n    /**\n     * Cross product of two vectors.\n     * @param {Vector} a: Vector to cross\n     * @param {Vector} b: Vector to cross\n     */\n    cross(v) {\n        return new Vector(this.y * v.z - this.z * v.y, this.z * v.x - this.x * v.z, this.x * v.y - this.y * v.x);\n    }\n    /**\n     * Get the length of the Vector\n     * @returns {number} Length\n     */\n    length() {\n        return Math.sqrt(this.dot(this));\n    }\n    /**\n     * Find the distance between this and another vector.\n     * @param {Vector} v: Vector to find distance to\n     * @param {2 | 3} d: 2D or 3D distance\n     * @returns {number} Distance\n     */\n    distance(v, d = 3) {\n        //2D distance\n        if (d === 2)\n            return Math.sqrt(Math.pow(this.x - v.x, 2) + Math.pow(this.y - v.y, 2));\n        //3D distance\n        else\n            return Math.sqrt(Math.pow(this.x - v.x, 2) + Math.pow(this.y - v.y, 2) + Math.pow(this.z - v.z, 2));\n    }\n    /**\n     * Lerp between this vector and another vector.\n     * @param {Vector} v: Vector to lerp to\n     * @param {number} fraction: Fraction to lerp\n     * @returns {Vector}\n     */\n    lerp(v, fraction) {\n        return v.subtract(this).multiply(fraction).add(this);\n    }\n    /**\n     * Returns the unit vector of this vector.\n     * @returns {Vector} Unit vector\n     */\n    unit() {\n        return this.divide(this.length());\n    }\n    min() {\n        return Math.min(Math.min(this.x, this.y), this.z);\n    }\n    max() {\n        return Math.max(Math.max(this.x, this.y), this.z);\n    }\n    /**\n     * To Angles\n     * @param {AxisMap} [axisMap = {x: \"x\", y: \"y\", z: \"z\"}]\n     * @returns {{ theta: number, phi: number }}\n     */\n    toSphericalCoords(axisMap = { x: \"x\", y: \"y\", z: \"z\" }) {\n        return {\n            theta: Math.atan2(this[axisMap.y], this[axisMap.x]),\n            phi: Math.acos(this[axisMap.z] / this.length()),\n        };\n    }\n    /**\n     * Returns the angle between this vector and vector a in radians.\n     * @param {Vector} a: Vector\n     * @returns {number}\n     */\n    angleTo(a) {\n        return Math.acos(this.dot(a) / (this.length() * a.length()));\n    }\n    /**\n     * Array representation of the vector.\n     * @param {number} n: Array length\n     * @returns {number[]} Array\n     * @example\n     * new Vector(1, 2, 3).toArray(); // [1, 2, 3]\n     */\n    toArray(n) {\n        return [this.x, this.y, this.z].slice(0, n || 3);\n    }\n    /**\n     * Clone the vector.\n     * @returns {Vector} New vector\n     */\n    clone() {\n        return new Vector(this.x, this.y, this.z);\n    }\n    /**\n     * Init this Vector with explicit values\n     * @param {number} x: X value\n     * @param {number} y: Y value\n     * @param {number} z: Z value\n     */\n    init(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        return this;\n    }\n    // static methods //\n    static negative(a, b = new Vector()) {\n        b.x = -a.x;\n        b.y = -a.y;\n        b.z = -a.z;\n        return b;\n    }\n    static add(a, b, c = new Vector()) {\n        if (b instanceof Vector) {\n            c.x = a.x + b.x;\n            c.y = a.y + b.y;\n            c.z = a.z + b.z;\n        }\n        else {\n            c.x = a.x + b;\n            c.y = a.y + b;\n            c.z = a.z + b;\n        }\n        return c;\n    }\n    static subtract(a, b, c = new Vector()) {\n        if (b instanceof Vector) {\n            c.x = a.x - b.x;\n            c.y = a.y - b.y;\n            c.z = a.z - b.z;\n        }\n        else {\n            c.x = a.x - b;\n            c.y = a.y - b;\n            c.z = a.z - b;\n        }\n        return c;\n    }\n    static multiply(a, b, c = new Vector()) {\n        if (b instanceof Vector) {\n            c.x = a.x * b.x;\n            c.y = a.y * b.y;\n            c.z = a.z * b.z;\n        }\n        else {\n            c.x = a.x * b;\n            c.y = a.y * b;\n            c.z = a.z * b;\n        }\n        return c;\n    }\n    static divide(a, b, c = new Vector()) {\n        if (b instanceof Vector) {\n            c.x = a.x / b.x;\n            c.y = a.y / b.y;\n            c.z = a.z / b.z;\n        }\n        else {\n            c.x = a.x / b;\n            c.y = a.y / b;\n            c.z = a.z / b;\n        }\n        return c;\n    }\n    static cross(a, b, c = new Vector()) {\n        c.x = a.y * b.z - a.z * b.y;\n        c.y = a.z * b.x - a.x * b.z;\n        c.z = a.x * b.y - a.y * b.x;\n        return c;\n    }\n    static unit(a, b) {\n        const length = a.length();\n        b.x = a.x / length;\n        b.y = a.y / length;\n        b.z = a.z / length;\n        return b;\n    }\n    /**\n     * Create new vector from angles\n     * @param {number} theta: Theta angle\n     * @param {number} phi: Phi angle\n     * @returns {Vector} New vector\n     */\n    static fromAngles(theta, phi) {\n        return new Vector(Math.cos(theta) * Math.cos(phi), Math.sin(phi), Math.sin(theta) * Math.cos(phi));\n    }\n    static randomDirection() {\n        return Vector.fromAngles(Math.random() * TWO_PI, Math.asin(Math.random() * 2 - 1));\n    }\n    static min(a, b) {\n        return new Vector(Math.min(a.x, b.x), Math.min(a.y, b.y), Math.min(a.z, b.z));\n    }\n    static max(a, b) {\n        return new Vector(Math.max(a.x, b.x), Math.max(a.y, b.y), Math.max(a.z, b.z));\n    }\n    /**\n     * Lerp between two vectors\n     * @param {Vector} a: Vector a\n     * @param {Vector} b: Vector b\n     * @param {number} fraction: Fraction\n     */\n    static lerp(a, b, fraction) {\n        if (b instanceof Vector) {\n            return b.subtract(a).multiply(fraction).add(a);\n        }\n        else {\n            return ((b - a) * fraction + a);\n        }\n    }\n    /**\n     * Create a new vector from an Array\n     * @param {number[]} array: Array\n     * @returns {Vector} New vector\n     */\n    static fromArray(a) {\n        if (Array.isArray(a)) {\n            return new Vector(a[0], a[1], a[2]);\n        }\n        return new Vector(a.x, a.y, a.z);\n    }\n    /**\n     * Angle between two vectors\n     * @param {Vector} a: Vector a\n     * @param {Vector} b: Vector b\n     * @returns\n     */\n    static angleBetween(a, b) {\n        return a.angleTo(b);\n    }\n    static distance(a, b, d) {\n        if (d === 2)\n            return Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2));\n        else\n            return Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2) + Math.pow(a.z - b.z, 2));\n    }\n    static toDegrees(a) {\n        return a * (180 / PI);\n    }\n    static normalizeAngle(radians) {\n        let angle = radians % TWO_PI;\n        angle = angle > PI ? angle - TWO_PI : angle < -PI ? TWO_PI + angle : angle;\n        //returns normalized values to -1,1\n        return angle / PI;\n    }\n    static normalizeRadians(radians) {\n        if (radians >= PI / 2) {\n            radians -= TWO_PI;\n        }\n        if (radians <= -PI / 2) {\n            radians += TWO_PI;\n            radians = PI - radians;\n        }\n        //returns normalized values to -1,1\n        return radians / PI;\n    }\n    static find2DAngle(cx, cy, ex, ey) {\n        const dy = ey - cy;\n        const dx = ex - cx;\n        const theta = Math.atan2(dy, dx);\n        return theta;\n    }\n    /**\n     * Find 3D rotation between two vectors\n     * @param {Vector} a: First vector\n     * @param {Vector} b: Second vector\n     * @param {boolean} normalize: Normalize the result\n     */\n    static findRotation(a, b, normalize = true) {\n        if (normalize) {\n            return new Vector(Vector.normalizeRadians(Vector.find2DAngle(a.z, a.x, b.z, b.x)), Vector.normalizeRadians(Vector.find2DAngle(a.z, a.y, b.z, b.y)), Vector.normalizeRadians(Vector.find2DAngle(a.x, a.y, b.x, b.y)));\n        }\n        else {\n            return new Vector(Vector.find2DAngle(a.z, a.x, b.z, b.x), Vector.find2DAngle(a.z, a.y, b.z, b.y), Vector.find2DAngle(a.x, a.y, b.x, b.y));\n        }\n    }\n    /**\n     * Find roll pitch yaw of plane formed by 3 points\n     * @param {Vector} a: Vector\n     * @param {Vector} b: Vector\n     * @param {Vector} c: Vector\n     */\n    static rollPitchYaw(a, b, c) {\n        if (!c) {\n            return new Vector(Vector.normalizeAngle(Vector.find2DAngle(a.z, a.y, b.z, b.y)), Vector.normalizeAngle(Vector.find2DAngle(a.z, a.x, b.z, b.x)), Vector.normalizeAngle(Vector.find2DAngle(a.x, a.y, b.x, b.y)));\n        }\n        const qb = b.subtract(a);\n        const qc = c.subtract(a);\n        const n = qb.cross(qc);\n        const unitZ = n.unit();\n        const unitX = qb.unit();\n        const unitY = unitZ.cross(unitX);\n        const beta = Math.asin(unitZ.x) || 0;\n        const alpha = Math.atan2(-unitZ.y, unitZ.z) || 0;\n        const gamma = Math.atan2(-unitY.x, unitX.x) || 0;\n        return new Vector(Vector.normalizeAngle(alpha), Vector.normalizeAngle(beta), Vector.normalizeAngle(gamma));\n    }\n    /**\n     * Find angle between 3D Coordinates\n     * @param {Vector | number} a: Vector or Number\n     * @param {Vector | number} b: Vector or Number\n     * @param {Vector | number} c: Vector or Number\n     */\n    static angleBetween3DCoords(a, b, c) {\n        if (!(a instanceof Vector)) {\n            a = new Vector(a);\n            b = new Vector(b);\n            c = new Vector(c);\n        }\n        // Calculate vector between points 1 and 2\n        const v1 = a.subtract(b);\n        // Calculate vector between points 2 and 3\n        const v2 = c.subtract(b);\n        // The dot product of vectors v1 & v2 is a function of the cosine of the\n        // angle between them (it's scaled by the product of their magnitudes).\n        const v1norm = v1.unit();\n        const v2norm = v2.unit();\n        // Calculate the dot products of vectors v1 and v2\n        const dotProducts = v1norm.dot(v2norm);\n        // Extract the angle from the dot products\n        const angle = Math.acos(dotProducts);\n        // return single angle Normalized to 1\n        return Vector.normalizeRadians(angle);\n    }\n    /**\n     * Get normalized, spherical coordinates for the vector bc, relative to vector ab\n     * @param {Vector | number} a: Vector or Number\n     * @param {Vector | number} b: Vector or Number\n     * @param {Vector | number} c: Vector or Number\n     * @param {AxisMap} axisMap: Mapped axis to get the right spherical coords\n     */\n    static getRelativeSphericalCoords(a, b, c, axisMap) {\n        if (!(a instanceof Vector)) {\n            a = new Vector(a);\n            b = new Vector(b);\n            c = new Vector(c);\n        }\n        // Calculate vector between points 1 and 2\n        const v1 = b.subtract(a);\n        // Calculate vector between points 2 and 3\n        const v2 = c.subtract(b);\n        const v1norm = v1.unit();\n        const v2norm = v2.unit();\n        const { theta: theta1, phi: phi1 } = v1norm.toSphericalCoords(axisMap);\n        const { theta: theta2, phi: phi2 } = v2norm.toSphericalCoords(axisMap);\n        const theta = theta1 - theta2;\n        const phi = phi1 - phi2;\n        return {\n            theta: Vector.normalizeAngle(theta),\n            phi: Vector.normalizeAngle(phi),\n        };\n    }\n    /**\n     * Get normalized, spherical coordinates for the vector bc\n     * @param {Vector | number} a: Vector or Number\n     * @param {Vector | number} b: Vector or Number\n     * @param {AxisMap} axisMap: Mapped axis to get the right spherical coords\n     */\n    static getSphericalCoords(a, b, axisMap = { x: \"x\", y: \"y\", z: \"z\" }) {\n        if (!(a instanceof Vector)) {\n            a = new Vector(a);\n            b = new Vector(b);\n        }\n        // Calculate vector between points 1 and 2\n        const v1 = b.subtract(a);\n        const v1norm = v1.unit();\n        const { theta, phi } = v1norm.toSphericalCoords(axisMap);\n        return {\n            theta: Vector.normalizeAngle(-theta),\n            phi: Vector.normalizeAngle(PI / 2 - phi),\n        };\n    }\n}\n","import Vector from \"../utils/vector\";\nimport { PI } from \"./../constants\";\n/**\n * Calculate stable plane (triangle) from 4 face landmarks\n * @param {Array} lm : array of results from tfjs or mediapipe\n */\nexport const createEulerPlane = (lm) => {\n    //create face detection square bounds\n    const p1 = new Vector(lm[21]); //top left\n    const p2 = new Vector(lm[251]); //top right\n    const p3 = new Vector(lm[397]); //bottom right\n    const p4 = new Vector(lm[172]); //bottom left\n    const p3mid = p3.lerp(p4, 0.5); // bottom midpoint\n    return {\n        vector: [p1, p2, p3mid],\n        points: [p1, p2, p3, p4],\n    };\n};\n/**\n * Calculate roll, pitch, yaw, centerpoint, and rough dimentions of face plane\n * @param {Array} lm : array of results from tfjs or mediapipe\n */\nexport const calcHead = (lm) => {\n    // find 3 vectors that form a plane to represent the head\n    const plane = createEulerPlane(lm).vector;\n    // calculate roll pitch and yaw from vectors\n    const rotate = Vector.rollPitchYaw(plane[0], plane[1], plane[2]);\n    // find the center of the face detection box\n    const midPoint = plane[0].lerp(plane[1], 0.5);\n    // find the dimensions roughly of the face detection box\n    const width = plane[0].distance(plane[1]);\n    const height = midPoint.distance(plane[2]);\n    //flip\n    rotate.x *= -1;\n    rotate.z *= -1;\n    return {\n        //defaults to radians for rotation around x,y,z axis\n        y: rotate.y * PI,\n        x: rotate.x * PI,\n        z: rotate.z * PI,\n        width: width,\n        height: height,\n        //center of face detection square\n        position: midPoint.lerp(plane[2], 0.5),\n        //returns euler angles normalized between -1 and 1\n        normalized: {\n            y: rotate.y,\n            x: rotate.x,\n            z: rotate.z,\n        },\n        degrees: {\n            y: rotate.y * 180,\n            x: rotate.x * 180,\n            z: rotate.z * 180,\n        },\n    };\n};\n","import Vector from \"../utils/vector\";\nimport { clamp, remap } from \"../utils/helpers\";\nimport { RIGHT, LEFT } from \"./../constants\";\n/**\n * Landmark points labeled for eye, brow, and pupils\n */\nconst points = {\n    eye: {\n        [LEFT]: [130, 133, 160, 159, 158, 144, 145, 153],\n        [RIGHT]: [263, 362, 387, 386, 385, 373, 374, 380],\n    },\n    brow: {\n        [LEFT]: [35, 244, 63, 105, 66, 229, 230, 231],\n        [RIGHT]: [265, 464, 293, 334, 296, 449, 450, 451],\n    },\n    pupil: {\n        [LEFT]: [468, 469, 470, 471, 472],\n        [RIGHT]: [473, 474, 475, 476, 477],\n    },\n};\n/**\n * Calculate eye open ratios and remap to 0-1\n * @param {Array} lm : array of results from tfjs or mediapipe\n * @param {Side} side : designate left or right\n * @param {Number} high : ratio at which eye is considered open\n * @param {Number} low : ratio at which eye is comsidered closed\n */\nexport const getEyeOpen = (lm, side = LEFT, { high = 0.85, low = 0.55 } = {}) => {\n    const eyePoints = points.eye[side];\n    const eyeDistance = eyeLidRatio(lm[eyePoints[0]], lm[eyePoints[1]], lm[eyePoints[2]], lm[eyePoints[3]], lm[eyePoints[4]], lm[eyePoints[5]], lm[eyePoints[6]], lm[eyePoints[7]]);\n    // human eye width to height ratio is roughly .3\n    const maxRatio = 0.285;\n    // compare ratio against max ratio\n    const ratio = clamp(eyeDistance / maxRatio, 0, 2);\n    // remap eye open and close ratios to increase sensitivity\n    const eyeOpenRatio = remap(ratio, low, high);\n    return {\n        // remapped ratio\n        norm: eyeOpenRatio,\n        // ummapped ratio\n        raw: ratio,\n    };\n};\n/**\n * Calculate eyelid distance ratios based on landmarks on the face\n */\nexport const eyeLidRatio = (eyeOuterCorner, eyeInnerCorner, eyeOuterUpperLid, eyeMidUpperLid, eyeInnerUpperLid, eyeOuterLowerLid, eyeMidLowerLid, eyeInnerLowerLid) => {\n    eyeOuterCorner = new Vector(eyeOuterCorner);\n    eyeInnerCorner = new Vector(eyeInnerCorner);\n    eyeOuterUpperLid = new Vector(eyeOuterUpperLid);\n    eyeMidUpperLid = new Vector(eyeMidUpperLid);\n    eyeInnerUpperLid = new Vector(eyeInnerUpperLid);\n    eyeOuterLowerLid = new Vector(eyeOuterLowerLid);\n    eyeMidLowerLid = new Vector(eyeMidLowerLid);\n    eyeInnerLowerLid = new Vector(eyeInnerLowerLid);\n    //use 2D Distances instead of 3D for less jitter\n    const eyeWidth = eyeOuterCorner.distance(eyeInnerCorner, 2);\n    const eyeOuterLidDistance = eyeOuterUpperLid.distance(eyeOuterLowerLid, 2);\n    const eyeMidLidDistance = eyeMidUpperLid.distance(eyeMidLowerLid, 2);\n    const eyeInnerLidDistance = eyeInnerUpperLid.distance(eyeInnerLowerLid, 2);\n    const eyeLidAvg = (eyeOuterLidDistance + eyeMidLidDistance + eyeInnerLidDistance) / 3;\n    const ratio = eyeLidAvg / eyeWidth;\n    return ratio;\n};\n/**\n * Calculate pupil position [-1,1]\n * @param {Results} lm : array of results from tfjs or mediapipe\n * @param {Side} side : left or right\n */\nexport const pupilPos = (lm, side = LEFT) => {\n    const eyeOuterCorner = new Vector(lm[points.eye[side][0]]);\n    const eyeInnerCorner = new Vector(lm[points.eye[side][1]]);\n    const eyeWidth = eyeOuterCorner.distance(eyeInnerCorner, 2);\n    const midPoint = eyeOuterCorner.lerp(eyeInnerCorner, 0.5);\n    const pupil = new Vector(lm[points.pupil[side][0]]);\n    const dx = midPoint.x - pupil.x;\n    //eye center y is slightly above midpoint\n    const dy = midPoint.y - eyeWidth * 0.075 - pupil.y;\n    let ratioX = dx / (eyeWidth / 2);\n    let ratioY = dy / (eyeWidth / 4);\n    ratioX *= 4;\n    ratioY *= 4;\n    return { x: ratioX, y: ratioY };\n};\n/**\n * Method to stabilize blink speeds to fix inconsistent eye open/close timing\n * @param {Object} eye : object with left and right eye values\n * @param {Number} headY : head y axis rotation in radians\n * @param {Object} options: Options for blink stabilization\n */\nexport const stabilizeBlink = (eye, headY, { enableWink = true, maxRot = 0.5, } = {}) => {\n    eye.r = clamp(eye.r, 0, 1);\n    eye.l = clamp(eye.l, 0, 1);\n    //difference between each eye\n    const blinkDiff = Math.abs(eye.l - eye.r);\n    //theshold to which difference is considered a wink\n    const blinkThresh = enableWink ? 0.8 : 1.2;\n    //detect when both eyes are closing\n    const isClosing = eye.l < 0.3 && eye.r < 0.3;\n    //detect when both eyes are opening\n    const isOpen = eye.l > 0.6 && eye.r > 0.6;\n    // sets obstructed eye to the opposite eye value\n    if (headY > maxRot) {\n        return { l: eye.r, r: eye.r };\n    }\n    if (headY < -maxRot) {\n        return { l: eye.l, r: eye.l };\n    }\n    // returns either a wink or averaged blink values\n    return {\n        l: blinkDiff >= blinkThresh && !isClosing && !isOpen\n            ? eye.l\n            : eye.r > eye.l\n                ? Vector.lerp(eye.r, eye.l, 0.95)\n                : Vector.lerp(eye.r, eye.l, 0.05),\n        r: blinkDiff >= blinkThresh && !isClosing && !isOpen\n            ? eye.r\n            : eye.r > eye.l\n                ? Vector.lerp(eye.r, eye.l, 0.95)\n                : Vector.lerp(eye.r, eye.l, 0.05),\n    };\n};\n/**\n * Calculate Eyes\n * @param {Array} lm : array of results from tfjs or mediapipe\n */\nexport const calcEyes = (lm, { high = 0.85, low = 0.55, } = {}) => {\n    //return early if no iris tracking\n    if (lm.length !== 478) {\n        return {\n            l: 1,\n            r: 1,\n        };\n    }\n    //open [0,1]\n    const leftEyeLid = getEyeOpen(lm, LEFT, { high: high, low: low });\n    const rightEyeLid = getEyeOpen(lm, RIGHT, { high: high, low: low });\n    return {\n        l: leftEyeLid.norm || 0,\n        r: rightEyeLid.norm || 0,\n    };\n};\n/**\n * Calculate pupil location normalized to eye bounds\n * @param {Array} lm : array of results from tfjs or mediapipe\n */\nexport const calcPupils = (lm) => {\n    //pupil x:[-1,1],y:[-1,1]\n    if (lm.length !== 478) {\n        return { x: 0, y: 0 };\n    }\n    else {\n        //track pupils using left eye\n        const pupilL = pupilPos(lm, LEFT);\n        const pupilR = pupilPos(lm, RIGHT);\n        return {\n            x: (pupilL.x + pupilR.x) * 0.5 || 0,\n            y: (pupilL.y + pupilR.y) * 0.5 || 0,\n        };\n    }\n};\n/**\n * Calculate brow raise\n * @param {Results} lm : array of results from tfjs or mediapipe\n * @param {Side} side : designate left or right\n */\nexport const getBrowRaise = (lm, side = LEFT) => {\n    const browPoints = points.brow[side];\n    const browDistance = eyeLidRatio(lm[browPoints[0]], lm[browPoints[1]], lm[browPoints[2]], lm[browPoints[3]], lm[browPoints[4]], lm[browPoints[5]], lm[browPoints[6]], lm[browPoints[7]]);\n    const maxBrowRatio = 1.15;\n    const browHigh = 0.125;\n    const browLow = 0.07;\n    const browRatio = browDistance / maxBrowRatio - 1;\n    const browRaiseRatio = (clamp(browRatio, browLow, browHigh) - browLow) / (browHigh - browLow);\n    return browRaiseRatio;\n};\n/**\n * Take the average of left and right eyebrow raise values\n * @param {Array} lm : array of results from tfjs or mediapipe\n */\nexport const calcBrow = (lm) => {\n    if (lm.length !== 478) {\n        return 0;\n    }\n    else {\n        const leftBrow = getBrowRaise(lm, LEFT);\n        const rightBrow = getBrowRaise(lm, RIGHT);\n        return (leftBrow + rightBrow) / 2 || 0;\n    }\n};\n","import Vector from \"../utils/vector\";\nimport { remap, clamp } from \"../utils/helpers\";\n/**\n * Calculate Mouth Shape\n * @param {Array} lm : array of results from tfjs or mediapipe\n */\nexport const calcMouth = (lm) => {\n    // eye keypoints\n    const eyeInnerCornerL = new Vector(lm[133]);\n    const eyeInnerCornerR = new Vector(lm[362]);\n    const eyeOuterCornerL = new Vector(lm[130]);\n    const eyeOuterCornerR = new Vector(lm[263]);\n    // eye keypoint distances\n    const eyeInnerDistance = eyeInnerCornerL.distance(eyeInnerCornerR);\n    const eyeOuterDistance = eyeOuterCornerL.distance(eyeOuterCornerR);\n    // mouth keypoints\n    const upperInnerLip = new Vector(lm[13]);\n    const lowerInnerLip = new Vector(lm[14]);\n    const mouthCornerLeft = new Vector(lm[61]);\n    const mouthCornerRight = new Vector(lm[291]);\n    // mouth keypoint distances\n    const mouthOpen = upperInnerLip.distance(lowerInnerLip);\n    const mouthWidth = mouthCornerLeft.distance(mouthCornerRight);\n    // mouth open and mouth shape ratios\n    // let ratioXY = mouthWidth / mouthOpen;\n    let ratioY = mouthOpen / eyeInnerDistance;\n    let ratioX = mouthWidth / eyeOuterDistance;\n    // normalize and scale mouth open\n    ratioY = remap(ratioY, 0.15, 0.7);\n    // normalize and scale mouth shape\n    ratioX = remap(ratioX, 0.45, 0.9);\n    ratioX = (ratioX - 0.3) * 2;\n    // const mouthX = remap(ratioX - 0.4, 0, 0.5);\n    const mouthX = ratioX;\n    const mouthY = remap(mouthOpen / eyeInnerDistance, 0.17, 0.5);\n    //Depricated: Change sensitivity due to facemesh and holistic have different point outputs.\n    // const fixFacemesh = runtime === \"tfjs\" ? 1.3 : 0;\n    // let ratioI = remap(mouthXY, 1.3 + fixFacemesh * 0.8, 2.6 + fixFacemesh) * remap(mouthY, 0, 1);\n    const ratioI = clamp(remap(mouthX, 0, 1) * 2 * remap(mouthY, 0.2, 0.7), 0, 1);\n    const ratioA = mouthY * 0.4 + mouthY * (1 - ratioI) * 0.6;\n    const ratioU = mouthY * remap(1 - ratioI, 0, 0.3) * 0.1;\n    const ratioE = remap(ratioU, 0.2, 1) * (1 - ratioI) * 0.3;\n    const ratioO = (1 - ratioI) * remap(mouthY, 0.3, 1) * 0.4;\n    return {\n        x: ratioX || 0,\n        y: ratioY || 0,\n        shape: {\n            A: ratioA || 0,\n            E: ratioE || 0,\n            I: ratioI || 0,\n            O: ratioO || 0,\n            U: ratioU || 0,\n        },\n    };\n};\n","import { calcHead } from \"./calcHead\";\nimport { calcEyes, stabilizeBlink, calcPupils, calcBrow } from \"./calcEyes\";\nimport { calcMouth } from \"./calcMouth\";\n/** Class representing face solver. */\nexport class FaceSolver {\n    /**\n     * Combines head, eye, pupil, and eyebrow calcs into one method\n     * @param {Results} lm : array of results from tfjs or mediapipe\n     * @param {String} runtime: set as either \"tfjs\" or \"mediapipe\"\n     * @param {IFaceSolveOptions} options: options for face solver\n     */\n    static solve(lm, { runtime = \"tfjs\", video = null, imageSize = null, smoothBlink = false, blinkSettings = [], } = {}) {\n        if (!lm) {\n            console.error(\"Need Face Landmarks\");\n            return;\n        }\n        // set image size based on video\n        if (video) {\n            const videoEl = (typeof video === \"string\" ? document.querySelector(video) : video);\n            imageSize = {\n                width: videoEl.videoWidth,\n                height: videoEl.videoHeight,\n            };\n        }\n        //if runtime is mediapipe, we need the image dimentions for accurate calculations\n        if (runtime === \"mediapipe\" && imageSize) {\n            for (const e of lm) {\n                e.x *= imageSize.width;\n                e.y *= imageSize.height;\n                e.z *= imageSize.width;\n            }\n        }\n        const getHead = calcHead(lm);\n        const getMouth = calcMouth(lm);\n        //set high and low remapping values based on the runtime (tfjs vs mediapipe) of the results\n        blinkSettings = blinkSettings.length > 0 ? blinkSettings : runtime === \"tfjs\" ? [0.55, 0.85] : [0.35, 0.5];\n        let getEye = calcEyes(lm, {\n            high: blinkSettings[1],\n            low: blinkSettings[0],\n        });\n        // apply blink stabilizer if true\n        if (smoothBlink) {\n            getEye = stabilizeBlink(getEye, getHead.y);\n        }\n        const getPupils = calcPupils(lm);\n        const getBrow = calcBrow(lm);\n        return {\n            head: getHead,\n            eye: getEye,\n            brow: getBrow,\n            pupil: getPupils,\n            mouth: getMouth,\n        };\n    }\n}\n/** expose blink stabilizer as a static method */\nFaceSolver.stabilizeBlink = stabilizeBlink;\n"],"names":["clamp","val","min","max","remap","RIGHT","LEFT","PI","TWO_PI","Vector","a","b","c","_a","_b","_c","_d","_e","_f","v","d","fraction","axisMap","n","x","y","z","length","theta","phi","radians","angle","cx","cy","ex","ey","dy","dx","normalize","qb","qc","unitZ","unitX","unitY","beta","alpha","gamma","v1","v2","v1norm","v2norm","dotProducts","theta1","phi1","theta2","phi2","createEulerPlane","lm","p1","p2","p3","p4","p3mid","calcHead","plane","rotate","midPoint","width","height","points","getEyeOpen","side","high","low","eyePoints","eyeDistance","eyeLidRatio","ratio","eyeOuterCorner","eyeInnerCorner","eyeOuterUpperLid","eyeMidUpperLid","eyeInnerUpperLid","eyeOuterLowerLid","eyeMidLowerLid","eyeInnerLowerLid","eyeWidth","eyeOuterLidDistance","eyeMidLidDistance","eyeInnerLidDistance","pupilPos","pupil","ratioX","ratioY","stabilizeBlink","eye","headY","enableWink","maxRot","blinkDiff","blinkThresh","isClosing","isOpen","calcEyes","leftEyeLid","rightEyeLid","calcPupils","pupilL","pupilR","getBrowRaise","browPoints","browDistance","maxBrowRatio","browHigh","browLow","browRatio","calcBrow","leftBrow","rightBrow","calcMouth","eyeInnerCornerL","eyeInnerCornerR","eyeOuterCornerL","eyeOuterCornerR","eyeInnerDistance","eyeOuterDistance","upperInnerLip","lowerInnerLip","mouthCornerLeft","mouthCornerRight","mouthOpen","mouthWidth","mouthX","mouthY","ratioI","ratioA","ratioU","ratioE","ratioO","FaceSolver","runtime","video","imageSize","smoothBlink","blinkSettings","videoEl","e","getHead","getMouth","getEye","getPupils","getBrow"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6]}